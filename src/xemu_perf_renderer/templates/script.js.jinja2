const kPalette = [
    "#0C7BDC",
    "#E66100",
    "#009E73",
    "#CC79A7",
    "#56B4E9",
    "#9A6324",
    "#882255",
    "#F0E442",
    "#469990",
    "#D55E00",
]

const kTooltipConfig = {
    align: "left",
    font: {
        family: "Courier New, monospace",
        size: 14
    }
};

const kCommonXAxisConfig = {
    automargin: true,
    tickangle: -25,
    categoryorder: "category ascending",
    zeroline: false
};

const kCommonYAxisConfig = {
    zeroline: false
};

const kCommonMarkerConfig = {
    size: 12
};

const kSearchableDataFields = [
    "cpu_manufacturer",
    "gpu_renderer",
    "gpu_vendor",
    "os_system",
    "renderer",
    "xemu_version",
    "machine_info",
    "trend"
];

const kDebounceTimeoutMilliseconds = 100;

const kMatchingDataItemsPadding = 20;

const kMaxJitter = 0.4;

const kMachineContinuityLineStyle = {
    color: "rgba(60, 20, 60, 0.7)",
    width: 2
};

function styleTitle(titleString) {
    return {
        text: titleString,
        font: {
            family: "Arial",
            size: 22
        },
        x: 0.5,
        xanchor: "center"
    }
}

function expandTrendEnum(val) {
    {# Keep in sync with renderer.py #}
    switch (val) {
        case "W":
            return "Worsening";
        case "N":
            return "";  {# Insufficient data to detect trending. #}
        case "S":
            return "Stable";
        case "I":
            return "Improving";
    }
}

function expandData(rawData) {
    return rawData.map(d => {
        return {
            ...d,
            trend: expandTrendEnum(d.trend)
        };
    });
}

function processData(rawData, excludeMaxOutlier) {
    return rawData.map(d => {
        let average_us = d.average_us;
        let max_us = d.max_us;
        let min_us = d.min_us;

        if (excludeMaxOutlier) {
            average_us = d.average_us_exmax;
            max_us = d.inner_max_us;
        }

        let error_plus_us;
        let error_minus_us;
        let adjusted_max_ms;
        let adjusted_min_ms;
        if (isNaN(max_us) || isNaN(min_us)) {
            error_plus_us = 0;
            error_minus_us = 0;
            adjusted_max_ms = NaN;
            adjusted_min_ms = NaN;
        } else {
            error_plus_us = max_us - average_us;
            error_minus_us = average_us - min_us;
            adjusted_max_ms = max_us / 1000.0;
            adjusted_min_ms = min_us / 1000.0;
        }

        return {
            ...d,
            average_us: average_us,
            average_ms: average_us / 1000.0,
            error_plus_us: error_plus_us,
            error_minus_us: error_minus_us,
            error_plus_ms: error_plus_us / 1000.0,
            error_minus_ms: error_minus_us / 1000.0,
            adjusted_max_ms: adjusted_max_ms,
            adjusted_min_ms: adjusted_min_ms
        };
    });
}

document.addEventListener("DOMContentLoaded", function () {
    let debounceTimer;
    const __allRawData = {{ results_data | tojson | safe }};
    const loadedData = expandData(__allRawData);

    const chartsContainer = document.getElementById("charts-container");
    const viewModeSelector = document.getElementById("slice-selector");
    const outlierCheckbox = document.getElementById("outlier-checkbox");
    const showErrorBarsCheckbox = document.getElementById("error-bars-checkbox");

    const fullscreenOverlay = document.getElementById("fullscreen-overlay");
    const fullscreenChartDiv = document.getElementById("fullscreen-chart");
    const closeFullscreenBtn = document.getElementById("close-fullscreen");

    closeFullscreenBtn.addEventListener("click", () => {
        fullscreenOverlay.style.display = "none";
        Plotly.purge(fullscreenChartDiv);
    });

    const testFilterInput = document.getElementById("test-filter");
    const dataFilterInput = document.getElementById("data-filter");

    const suggestionsOverlay = document.getElementById("data-filter-suggestions");

    const comparisonSchemes = {
        "by-cpu": {field: "cpu_manufacturer", title: "CPU"},
        "by-gpu": {field: "gpu_renderer", title: "GPU"},
        "by-gpu-vendor": {field: "gpu_vendor", title: "GPU Vendor"},
        "by-os": {field: "os_system", title: "Operating System"},
        "by-renderer": {field: "renderer", title: "Renderer Backend"},
        "by-version": {field: "xemu_version", title: "xemu Version"},
    };

    for (const key in comparisonSchemes) {
        const option = document.createElement("option");
        option.value = key;
        option.textContent = comparisonSchemes[key].title;
        viewModeSelector.appendChild(option);
    }

    const savedMode = localStorage.getItem("xemuPerfChartMode");
    const savedOutlier = localStorage.getItem("xemuPerfExcludeOutlier");

    if (savedMode && comparisonSchemes[savedMode]) {
        viewModeSelector.value = savedMode;
    } else {
        viewModeSelector.value = "by-version";
    }
    if (savedOutlier) {
        outlierCheckbox.checked = (savedOutlier === "true");
    } else {
        outlierCheckbox.checked = true;
    }

    const responsiveChartConfig = {responsive: true};

    function captureState(anchorTestName) {
        const params = new URLSearchParams();

        params.set("view", viewModeSelector.value);

        const outlier = outlierCheckbox.checked;
        if (outlier) {
            params.set("outlier", outlier);
        }

        const showErrorBars = showErrorBarsCheckbox.checked;
        if (showErrorBars) {
            params.set("showErrorBars", showErrorBars);
        }

        const testFilter = testFilterInput.value;
        if (testFilter) {
            params.set("testFilter", testFilter);
        }

        const dataFilter = dataFilterInput.value;
        if (dataFilter) {
            params.set("dataFilter", dataFilter);
        }

        const chipElements = document.querySelectorAll('#data-filter-chip-area .chip');
        chipElements.forEach(chip => {
            params.append('df', chip.dataset.filterValue);
        });

        if (anchorTestName) {
            params.set("anchor", anchorTestName);
        }

        return params;
    }

    function updateURLFromState(anchorTestName) {
        const params = captureState(anchorTestName);
        const newHash = params.toString();
        if (history.replaceState) {
            history.replaceState(null, "", newHash ? `#${newHash}` : window.location.pathname + window.location.search);
        } else {
            window.location.hash = newHash;
        }
    }

    function applyStateFromURL() {
        if (!window.location.hash) {
            return null;
        }

        const params = new URLSearchParams(window.location.hash.substring(1));

        const view = params.get("view");
        if (view && comparisonSchemes[view]) {
            viewModeSelector.value = view;
        }

        const outlier = params.get("outlier");
        if (outlier) {
            outlierCheckbox.checked = outlier === "true";
        }

        const showErrorBars = params.get("showErrorBars");
        if (showErrorBars) {
            showErrorBarsCheckbox.checked = showErrorBars === "true";
        }

        const testFilter = params.get("testFilter");
        if (testFilter) {
            testFilterInput.value = testFilter;
        }

        const dataFilter = params.get("dataFilter");
        if (dataFilter) {
            dataFilterInput.value = dataFilter;
        }

        const chips = params.getAll('df');
        if (chips.length > 0) {
            chips.forEach(chipText => createDataFilterChip(chipText));
        }

        return params.get("anchor");
    }

    function createDataFilterChip(text) {
        const chipArea = document.getElementById("data-filter-chip-area");

        const chip = document.createElement("div");
        chip.className = "chip";
        chip.dataset.filterValue = text;

        const chipText = document.createElement("span");
        chipText.textContent = text;

        const closeBtn = document.createElement("span");
        closeBtn.className = "chip-close-btn";
        closeBtn.innerHTML = "&times;";

        closeBtn.addEventListener("click", () => {
            chip.remove();
            handleFilterChange();
        });

        chip.appendChild(chipText);
        chip.appendChild(closeBtn);

        chipArea.appendChild(chip);
    }

    function shortVersion(xemu_version) {
        {#  xemu-0.8.92-master-<githash> #}
        {#  xemu-0.8.92-<build>-g<shorthash>-<branch_name>-<githash> #}

        match = xemu_version.match(/xemu-([0-9]+.[0-9]+.[0-9]+)-([0-9]+)-g.+-(.+)-.+/);
        if (match && match[1]) {
            return `${match[1]}-${match[2]}-${match[3]}`;
        }

        match = xemu_version.match(/xemu-([0-9]+.[0-9]+.[0-9]+)-master-.*/);
        if (match && match[1]) {
            return `${match[1]}`;
        }

        return xemu_version;
    }

    function buildChartButtons(onExpand, onShare) {
        const buttonsContainer = document.createElement("div");
        buttonsContainer.className = "chart-buttons-container";

        const expandButton = document.createElement("button");
        expandButton.textContent = "Expand";
        expandButton.className = "expand-button";
        buttonsContainer.appendChild(expandButton);

        const shareButton = document.createElement("button");
        shareButton.textContent = "Share";
        shareButton.className = "share-button";
        buttonsContainer.appendChild(shareButton);

        expandButton.addEventListener("click", (event) => {
            onExpand(event, expandButton)
        });

        shareButton.addEventListener("click", (event) => {
            onShare(event, shareButton)
        });

        return buttonsContainer;
    }

    function addChartContainer(name) {
        const chartContainerDiv = document.createElement("div");
        chartContainerDiv.className = "chart-container";

        const chartDiv = document.createElement("div");
        chartDiv.className = "chart-div";
        chartDiv.dataset.testName = name;

        chartContainerDiv.appendChild(chartDiv);
        chartsContainer.appendChild(chartContainerDiv);

        return chartDiv;
    }

    function renderSummaryChart(scheme, processedData) {
        const summaryChartDiv = addChartContainer("summary-chart");

        const means = {};
        for (const d of processedData) {
            const category = d[scheme.field];
            if (!means[category]) {
                means[category] = {total_us: 0, count: 0};
            }
            means[category].total_us += d.average_us;
            means[category].count++;
        }

        const summaryData = Object.entries(means).map(([category, totals]) => {
            const displayCategory = (scheme.field === "xemu_version") ? shortVersion(category) : category;
            return {
                category: displayCategory,
                score: (totals.total_us / totals.count) / 1000.0,
                points: totals.count
            };
        });

        const trace = {
            type: "bar",
            x: summaryData.map(d => d.category),
            y: summaryData.map(d => d.score),
            customdata: summaryData.map(d => d.points),
            hovertemplate: "<b>%{y}</b><br>" +
                "Num data points: %{customdata}" +
                "<extra></extra>"
        };

        const layout = {
            title: styleTitle("Overall average duration (lower is better)"),
            xaxis: {
                ...kCommonXAxisConfig,
                title: scheme.title,
            },
            yaxis: {...kCommonYAxisConfig, title: "Sum of averages"},
            hoverlabel: kTooltipConfig
        };
        Plotly.newPlot(summaryChartDiv, [trace], layout, responsiveChartConfig);

        const buttonsContainer = buildChartButtons(
            (_event, _expandButton) => {
                const fullscreenLayout = JSON.parse(JSON.stringify(layout));
                fullscreenLayout.title.font = {size: 24};
                fullscreenOverlay.style.display = "block";
                Plotly.newPlot(fullscreenChartDiv, [trace], fullscreenLayout, {responsive: true});
            },
            (event, shareButton) => {
                event.stopPropagation();

                const params = captureState("summary-chart");
                const shareableUrl = `${window.location.origin}${window.location.pathname}#${params.toString()}`;

                navigator.clipboard.writeText(shareableUrl).then(() => {
                    shareButton.textContent = "Copied!";
                    shareButton.classList.add("copied");
                    setTimeout(() => {
                        shareButton.textContent = "Share";
                        shareButton.classList.remove("copied");
                    }, 2000);
                });
            }
        );

        summaryChartDiv.appendChild(buttonsContainer);
    }

    function symbolForRendererBackend(renderer_backend) {
        if (renderer_backend === "GL") {
            return "circle";
        }

        if (renderer_backend === "VK") {
            return "star";
        }

        return "x";
    }

    function filteredTestsByName(processedData, filterText) {
        let testsByName = processedData.reduce((acc, d) => {
            (acc[d.test_name] = acc[d.test_name] || []).push(d);
            return acc;
        }, {});

        if (!filterText) {
            return testsByName;
        }

        const filteredTests = {};
        for (const testName in testsByName) {
            if (testName.toLowerCase().includes(filterText)) {
                filteredTests[testName] = testsByName[testName];
            }
        }
        return filteredTests;
    }

    function onPointClick(chart, points, selectedSchemeKey, scheme, testData, categoryMap) {
        if (!points.length) {
            return;
        }

        const clickedPoint = points[0];
        const machine_id_with_renderer = clickedPoint.customdata[6];

        if (!machine_id_with_renderer) {
            return;
        }

        const machineData = testData
            .filter(d => d.machine_id_with_renderer === machine_id_with_renderer)
            .sort((a, b) => {
                const valA = (selectedSchemeKey === "by-version") ? shortVersion(a[scheme.field]) : a[scheme.field];
                const valB = (selectedSchemeKey === "by-version") ? shortVersion(b[scheme.field]) : b[scheme.field];
                if (typeof valA === "string") {
                    return valA.localeCompare(valB);
                }
                return valA - valB;
            });

        const lineTrace = {
            type: "scatter",
            mode: "lines",
            x: machineData.map(d => d.jitteredX),
            y: machineData.map(d => d.average_ms),
            line: kMachineContinuityLineStyle,
            hoverinfo: "none",
            showlegend: false,
            name: "connection_line"
        };

        const tracesToRemove = [];
        chart.data.forEach((trace, index) => {
            if (trace.name === "connection_line") {
                tracesToRemove.push(index);
            }
        });

        if (tracesToRemove.length > 0) {
            Plotly.deleteTraces(chart, tracesToRemove);
        }

        Plotly.addTraces(chart, lineTrace);
    }

    function buildCustomData(machineData) {
        return machineData.map(d => [
            d.xemu_version,
            d.os_system,
            d.cpu_manufacturer,
            d.gpu_renderer,
            d.renderer,
            d.machine_id,
            d.machine_id_with_renderer,
            d.iso,
            d.cpu_freq_max,
            isNaN(d.adjusted_min_ms) ? "??" : d.adjusted_min_ms,
            isNaN(d.adjusted_max_ms) ? "No range data" : d.adjusted_max_ms
        ]);
    }

    function buildHoverTemplate() {
        return "<b>%{y:.2f} ms</b><br>" +
            "Xemu    %{customdata[0]}<br>" +
            "OS      %{customdata[1]}<br>" +
            "CPU     %{customdata[2]} [%{customdata[8]}]<br>" +
            "GPU     %{customdata[3]}<br>" +
            "Backend %{customdata[4]}<br>" +
            "%{customdata[9]} - %{customdata[10]}<br>" +
            "%{customdata[7]}<br>" +
            "%{customdata[5]}<br>" +
            "<extra></extra>"
    }

    function buildTrace(data, name, color) {
        return {
            type: "scatter",
            mode: "markers",
            name: name,
            marker: {
                ...kCommonMarkerConfig,
                symbol: data.map(d => symbolForRendererBackend(d.renderer)),
                color: color
            },
            x: data.map(d => d.jitteredX),
            y: data.map(d => d.average_ms),
            customdata: buildCustomData(data),
            hovertemplate: buildHoverTemplate()
        };
    }

    function buildErrorBars(data, name, color) {
        return {
            type: "scatter",
            mode: "none",
            name: name,
            x: data.map(d => d.jitteredX),
            y: data.map(d => d.average_ms),
            opacity: 0.5,
            error_y: {
                type: "data",
                symmetric: false,
                array: data.map(d => d.error_plus_ms),
                arrayminus: data.map(d => d.error_minus_ms),
                color: color
            }
        };
    }

    function renderTestResultCharts(selectedSchemeKey, scheme, processedData, filterText, showErrorBars) {
        const testsByName = filteredTestsByName(processedData, filterText)

        for (const testName in testsByName) {
            const chartDiv = addChartContainer(testName);

            const testData = testsByName[testName];
            const xCategories = [...new Set(testData.map(d => d[scheme.field]))].sort((a, b) => a.localeCompare(b));
            const categoryMap = new Map(xCategories.map((cat, i) => [cat, i]));

            const pointsPerCategory = {};
            testData.forEach(d => {
                const category = d[scheme.field];
                pointsPerCategory[category] = (pointsPerCategory[category] || 0) + 1;
            });

            const categoryIndexCounter = {};
            testData.forEach(d => {
                const category = d[scheme.field];
                const numPoints = pointsPerCategory[category];
                const currentIndex = categoryIndexCounter[category] || 0;

                const basePosition = categoryMap.get(category);
                let offset = 0;
                if (numPoints > 1) {
                    offset = (currentIndex / (numPoints - 1)) - 0.5;
                }

                d.jitteredX = basePosition + offset * kMaxJitter;

                categoryIndexCounter[category] = currentIndex + 1;
            });

            const traces = [];
            if (selectedSchemeKey === "by-version") {
                const machines = testData.reduce((acc, d) => {
                    (acc[d.machine_id] = acc[d.machine_id] || []).push(d);
                    return acc;
                }, {});

                Object.entries(machines).forEach(([machineId, machineData], index) => {
                    const color = kPalette[index % kPalette.length];
                    if (showErrorBars) {
                        traces.push(buildErrorBars(machineData, machineId, color))
                    }
                    traces.push(buildTrace(machineData, machineId, color));
                });
            } else {
                const versions = testData.reduce((acc, d) => {
                    (acc[d.xemu_version] = acc[d.xemu_version] || []).push(d);
                    return acc;
                }, {});

                Object.entries(versions).forEach(([version, versionData], index) => {
                    const color = kPalette[index % kPalette.length];
                    const name = shortVersion(version);
                    if (showErrorBars) {
                        traces.push(buildErrorBars(versionData, name, color))
                    }
                    traces.push(buildTrace(versionData, name, color));
                });
            }

            const layout = {
                title: styleTitle(`${testName} by ${scheme.title}`),
                xaxis: {
                    ...kCommonXAxisConfig,
                    title: scheme.title,
                    tickvals: Array.from(categoryMap.values()),
                    ticktext: Array.from(categoryMap.keys()).map(cat => (selectedSchemeKey === "by-version" ? shortVersion(cat) : cat))
                },
                yaxis: {
                    ...kCommonYAxisConfig,
                    title: "Avg duration (ms)",
                    autorange: true
                },
                showlegend: selectedSchemeKey !== "by-version",
                hoverlabel: kTooltipConfig
            };

            Plotly.newPlot(chartDiv, traces, layout, responsiveChartConfig);

            const buttonsContainer = buildChartButtons(
                (_event, _expandButton) => {
                    const fullscreenLayout = JSON.parse(JSON.stringify(layout));
                    if (fullscreenLayout.title) {
                        fullscreenLayout.title.font = {size: 24};
                    }
                    fullscreenOverlay.style.display = "block";
                    Plotly.newPlot(fullscreenChartDiv, traces, fullscreenLayout, {responsive: true});
                },
                (event, shareButton) => {
                    event.stopPropagation();

                    const params = captureState(testName);
                    const shareableUrl = `${window.location.origin}${window.location.pathname}#${params.toString()}`;

                    navigator.clipboard.writeText(shareableUrl).then(() => {
                        shareButton.textContent = "Copied";
                        shareButton.classList.add("copied");
                        setTimeout(() => {
                            shareButton.textContent = "Share";
                            shareButton.classList.remove("copied");
                        }, 2000);
                    });
                }
            );

            chartDiv.appendChild(buttonsContainer);

            chartDiv.on("plotly_click", function (eventData) {
                onPointClick(chartDiv, eventData.points, selectedSchemeKey, scheme, testData);
            });
        }
    }

    function renderAllCharts() {
        const excludeOutliers = outlierCheckbox.checked;
        const showErrorBars = showErrorBarsCheckbox.checked;
        const selectedSchemeKey = viewModeSelector.value;
        const scheme = comparisonSchemes[selectedSchemeKey];
        const testFilterText = testFilterInput.value.toLowerCase().trim();
        const dataFilterText = dataFilterInput.value.toLowerCase().trim();
        const chipElements = document.querySelectorAll('#data-filter-chip-area .chip');
        const dataFilterTerms = Array.from(chipElements).map(chip => chip.dataset.filterValue.toLowerCase());

        localStorage.setItem("xemuPerfChartMode", selectedSchemeKey);
        localStorage.setItem("xemuPerfExcludeOutlier", excludeOutliers);

        chartsContainer.innerHTML = "";

        let filteredRawData = loadedData;
        if (filteredRawData && (dataFilterText || dataFilterTerms.length > 0)) {
            filteredRawData = loadedData.filter(d => {
                const searchableString = kSearchableDataFields.map(key => d[key]).join(" ").toLowerCase();

                if (dataFilterText && !searchableString.includes(dataFilterText)) {
                    return false;
                }

                return dataFilterTerms.every(term => searchableString.includes(term));
            });
        }
        if (!filteredRawData || filteredRawData.length === 0) {
            chartsContainer.innerHTML = "<p>No data available to display.</p>";
            return;
        }

        const processedData = processData(filteredRawData, excludeOutliers);
        if (!testFilterText && !dataFilterText) {
            renderSummaryChart(scheme, processedData);
        }
        renderTestResultCharts(selectedSchemeKey, scheme, processedData, testFilterText, showErrorBars);
    }

    function highlightMatch(fullText, filterText) {
        if (!filterText) {
            return fullText;
        }
        const regex = new RegExp(filterText, "gi");

        const result = [];
        let lastIndex = 0;
        let match;
        while ((match = regex.exec(fullText)) !== null) {
            if (match.index > lastIndex) {
                result.push(`<span class="data-filter-suggestion-non-matching-text">${fullText.substring(lastIndex, match.index)}</span>`);
            }
            result.push(`<span class="data-filter-suggestion-matching-text"><u><b>${match[0]}</b></u></span>`);
            lastIndex = regex.lastIndex;
        }

        if (lastIndex < fullText.length) {
            result.push(`<span class="data-filter-suggestion-non-matching-text">${fullText.substring(lastIndex)}</span>`);
        }

        return result.join("");
    }

    function updateFilterSuggestions() {
        const filterText = dataFilterInput.value.toLowerCase().trim();

        if (!filterText) {
            suggestionsOverlay.style.display = "none";
            return;
        }

        const inputContainer = document.getElementById("data-filter-container");
        if (inputContainer) {
            const calculatedMaxWidth = window.innerWidth - kMatchingDataItemsPadding;
            suggestionsOverlay.style.maxWidth = `${calculatedMaxWidth}px`;
        }

        const matchCounts = {};
        let matchingMachines = new Set();
        loadedData.forEach(d => {
            for (const field of kSearchableDataFields) {
                const value = d[field];
                if (value && value.toLowerCase().includes(filterText)) {
                    matchCounts[value] = (matchCounts[value] || new Set()).add(d.machine_id);
                    matchingMachines.add(d.machine_id);
                }
            }
        });

        if (Object.keys(matchCounts).length === 0) {
            suggestionsOverlay.style.display = "none";
            return;
        }

        let html = `<ul>`;
        const sortedMatches = Object.entries(matchCounts).sort();
        for (const [match, matches] of sortedMatches) {
            const highlightedMatch = highlightMatch(match, filterText);
            html += `<li>${highlightedMatch} (${matches.size})</li>`;
        }
        html += "</ul>";

        suggestionsOverlay.innerHTML = html;
        suggestionsOverlay.style.display = "block";
    }

    function handleFilterChange() {
        let anchorTestName = null;
        let previousTopOffset = null;
        const allCurrentCharts = Array.from(document.querySelectorAll(".chart-container"));
        const orderedTestNames = allCurrentCharts.map(c => c.dataset.testName);

        for (const chart of allCurrentCharts) {
            const topPos = chart.getBoundingClientRect().top;
            if (topPos >= 0) {
                anchorTestName = chart.dataset.testName;
                previousTopOffset = topPos;
                break;
            }
        }
        if (!anchorTestName && allCurrentCharts.length > 0) {
            anchorTestName = allCurrentCharts[allCurrentCharts.length - 1].dataset.testName;
        }

        updateURLFromState(anchorTestName);

        renderAllCharts();

        requestAnimationFrame(() => {
            let targetChart = document.querySelector(`[data-test-name="${anchorTestName}"]`);
            if (!targetChart) {
                const originalIndex = orderedTestNames.indexOf(anchorTestName);
                for (let i = originalIndex - 1; i >= 0; i--) {
                    const previousTestName = orderedTestNames[i];
                    const previousChart = document.querySelector(`[data-test-name="${previousTestName}"]`);
                    if (previousChart) {
                        targetChart = previousChart;
                        break;
                    }
                }
            }

            if (targetChart) {
                const elementPosition = targetChart.getBoundingClientRect().top;
                const targetPosition = elementPosition - previousTopOffset;

                window.scrollTo({top: targetPosition});
            }
        });
    }

    function handleDebouncedChange() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            handleFilterChange();
        }, kDebounceTimeoutMilliseconds);
    }

    viewModeSelector.addEventListener("change", handleFilterChange);
    outlierCheckbox.addEventListener("change", handleFilterChange);
    showErrorBarsCheckbox.addEventListener("change", handleFilterChange);
    testFilterInput.addEventListener("input", handleDebouncedChange);

    dataFilterInput.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            const text = dataFilterInput.value.trim();
            if (text) {
                createDataFilterChip(text);
                dataFilterInput.value = "";
                suggestionsOverlay.style.display = "none";
                handleFilterChange();
            }
        }
    });
    dataFilterInput.addEventListener("input", () => {
        updateFilterSuggestions();
        handleDebouncedChange();
    });
    dataFilterInput.addEventListener("focus", updateFilterSuggestions);
    dataFilterInput.addEventListener("blur", () => {
        suggestionsOverlay.style.display = "none";
    });

    const initialAnchor = applyStateFromURL();

    renderAllCharts();

    if (initialAnchor) {
        setTimeout(() => {
            const targetChart = document.querySelector(`[data-test-name="${initialAnchor}"]`);
            if (targetChart) {
                targetChart.scrollIntoView({behavior: "auto", block: "start"});
            }
        }, 100);
    }
});